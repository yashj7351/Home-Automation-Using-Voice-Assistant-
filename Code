
#ifdef ENABLE_DEBUG
 #define DEBUG_ESP_PORT Serial
 #define NODEBUG_WEBSOCKETS
 #define NDEBUG
#endif 
#include <Arduino.h>
#include <ESP8266WiFi.h>
#include "SinricPro.h"
#include "SinricProSwitch.h"
#include <map>
#define WIFI_SSID "Redmi note 9" 
#define WIFI_PASS "kartik13"
#define APP_KEY "10f5effd-f480-49e2-9996-89b4c6e1d77e" 
#define APP_SECRET "052ff997-5a79-46f6-9c18-d12ab2733dbd-fee44e5f-4096-4fc9-
927a-16ed10a951a7" 
//Enter the device IDs here
#define device_ID_1 "638352d6b8a7fefbd64b5b60"
#define device_ID_2 "6383531a333d12dd2affc0c1"
#define device_ID_3 "638353c4b8a7fefbd64b5c57"
#define device_ID_4 "K"
// define the GPIO connected with Relays and switches
#define RelayPin1 3 //D1
#define RelayPin2 1 //D2
#define RelayPin3 16 //D5
#define RelayPin4 5 //D6
#define SwitchPin1 4 //SD3
#define SwitchPin2 14 //D3 
#define SwitchPin3 12 //D7
#define SwitchPin4 13 //RX
#define wifiLed 12 //D0
// comment the following line if you use a toggle switches instead of tactile buttons
//#define TACTILE_BUTTON 1
#define BAUD_RATE 9600
#define DEBOUNCE_TIME 250
typedef struct { // struct for the std::map below
 int relayPIN;
 int flipSwitchPIN;
} deviceConfig_t;
std::map<String, deviceConfig_t> devices = {
 //{deviceId, {relayPIN, flipSwitchPIN}}
 {device_ID_1, { RelayPin1, SwitchPin1 }},
{device_ID_2, { RelayPin2, SwitchPin2 }},
 {device_ID_3, { RelayPin3, SwitchPin3 }},
 {device_ID_4, { RelayPin4, SwitchPin4 }} 
};
typedef struct { // struct for the std::map below
 String deviceId;
 bool lastFlipSwitchState;
 unsigned long lastFlipSwitchChange;
} flipSwitchConfig_t;
std::map<int, flipSwitchConfig_t> flipSwitches; 
 
void setupRelays() { 
 for (auto &device : devices) { 
 int relayPIN = device.second.relayPIN; 
 pinMode(relayPIN, OUTPUT); 
 digitalWrite(relayPIN, HIGH);
 }
}
void setupFlipSwitches() {
for (auto &device : devices) { 
 flipSwitchConfig_t flipSwitchConfig; 
 flipSwitchConfig.deviceId = device.first; 
 flipSwitchConfig.lastFlipSwitchChange = 0;
flipSwitchConfig.lastFlipSwitchState = true; 
 int flipSwitchPIN = device.second.flipSwitchPIN; 
 flipSwitches[flipSwitchPIN] = flipSwitchConfig; 
 pinMode(flipSwitchPIN, INPUT_PULLUP); 
 }
}
bool onPowerState(String deviceId, bool &state)
{
 Serial.printf("%s: %s\r\n", deviceId.c_str(), state ? "on" : "off");
 int relayPIN = devices[deviceId].relayPIN; 
 digitalWrite(relayPIN, !state); 
 return true;
}
void handleFlipSwitches() {
 unsigned long actualMillis = millis(); 
 for (auto &flipSwitch : flipSwitches) { 
 unsigned long lastFlipSwitchChange = flipSwitch.second.lastFlipSwitchChange; 
 if (actualMillis - lastFlipSwitchChange > DEBOUNCE_TIME) { 
 int flipSwitchPIN = flipSwitch.first; 
 bool lastFlipSwitchState = flipSwitch.second.lastFlipSwitchState; 
 bool flipSwitchState = digitalRead(flipSwitchPIN);
if (flipSwitchState != lastFlipSwitchState) 
#ifdef TACTILE_BUTTON
 if (flipSwitchState) { 
 flipSwitch.second.lastFlipSwitchChange = actualMillis; 
 String deviceId = flipSwitch.second.deviceId; 
 int relayPIN = devices[deviceId].relayPIN; 
 bool newRelayState = !digitalRead(relayPIN); 
 digitalWrite(relayPIN, newRelayState
 SinricProSwitch &mySwitch = SinricPro[deviceId]; 
 mySwitch.sendPowerStateEvent(!newRelayState); 
 }
#endif 
 flipSwitch.second.lastFlipSwitchState = flipSwitchState; 
 }
 }
 }
}
void setupWiFi()
{
 Serial.printf("\r\n[Wifi]: Connecting");
 WiFi.begin(WIFI_SSID, WIFI_PASS);
 while (WiFi.status() != WL_CONNECTED)
 {
 Serial.printf(".");
delay(250);
 }
 digitalWrite(wifiLed, LOW);
 Serial.printf("connected!\r\n[WiFi]: IP-Address is %s\r\n", WiFi.localIP().toString().c_str());
}
void setupSinricPro()
{
 for (auto &device : devices)
 {
 const char *deviceId = device.first.c_str();
 SinricProSwitch &mySwitch = SinricPro[deviceId];
 mySwitch.onPowerState(onPowerState);
 }
 SinricPro.begin(APP_KEY, APP_SECRET);
 SinricPro.restoreDeviceStates(true);
}
void setup()
{
 Serial.begin(BAUD_RATE);
 pinMode(wifiLed, OUTPUT);
 digitalWrite(wifiLed, HIGH);
 setupRelays();
 setupFlipSwitches();
setupWiFi();
 setupSinricPro();
}
void loop()
{
 SinricPro.handle();
 handleFlipSwitches();
}
